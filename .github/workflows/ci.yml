name: CI/CD Pipeline - MedBillGuardAgent

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  # Stage 1: Code Quality & Linting
  lint:
    name: "Lint & Format Check"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root --with dev

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Ruff (linting)
        run: |
          poetry run ruff check . --output-format=github
          poetry run ruff format --check .

      - name: Check import sorting
        run: poetry run ruff check --select I .

  # Stage 2: Type Checking
  typecheck:
    name: "Type Check (MyPy)"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Run MyPy (strict type checking)
        run: poetry run mypy . --strict --show-error-codes

  # Stage 3: Security Scanning
  security:
    name: "Security Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Bandit (security linting)
        run: poetry run bandit -r . -x tests/ -f json -o bandit-report.json

      - name: Run Safety (dependency vulnerability check)
        run: poetry run safety check --json --output safety-report.json

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Stage 4: Testing & Coverage
  test:
    name: "Test Suite"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint, typecheck]
    
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

      nats:
        image: nats:2.10-alpine
        ports:
          - 4222:4222
        options: >-
          --health-cmd "nats --help"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            tesseract-ocr \
            tesseract-ocr-eng \
            tesseract-ocr-hin \
            libpoppler-cpp-dev \
            libgl1-mesa-glx

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Create test fixtures directory
        run: mkdir -p fixtures

      - name: Run pytest with coverage
        env:
          FIXED_TIME: "2025-06-30T12:00:00Z"
          VIVARAN_ENV: "test"
          VIVARAN_REDIS_URL: "redis://localhost:6379/1"
          VIVARAN_NATS_URL: "nats://localhost:4222"
        run: |
          poetry run pytest \
            --cov=medbillguardagent \
            --cov-branch \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=90 \
            --junit-xml=pytest-report.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: |
            pytest-report.xml
            htmlcov/
            coverage.xml

  # Stage 5: Performance Testing
  performance:
    name: "Performance Tests"
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Locust performance tests (smoke test)
        run: |
          # Start service in background
          poetry run uvicorn medbillguardagent:app --host 127.0.0.1 --port 8000 &
          sleep 10
          
          # Run smoke test with Locust
          poetry run locust \
            --host=http://127.0.0.1:8000 \
            --users=10 \
            --spawn-rate=2 \
            --run-time=60s \
            --headless \
            --only-summary \
            --logfile=locust.log \
            --html=locust-report.html

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: |
            locust.log
            locust-report.html

  # Stage 6: Docker Build & Security Scan
  docker:
    name: "Docker Build & Scan"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [test, security]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Stage 7: Deployment (conditional)
  deploy-staging:
    name: "Deploy to Staging"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [docker, performance]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          # kubectl apply -f k8s/ --namespace=staging

  deploy-production:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [docker, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here
          # kubectl apply -f k8s/ --namespace=production

  # Summary job for status checks
  ci-success:
    name: "CI Pipeline Success"
    runs-on: ubuntu-latest
    needs: [lint, typecheck, security, test, docker]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" || \
                "${{ needs.typecheck.result }}" != "success" || \
                "${{ needs.security.result }}" != "success" || \
                "${{ needs.test.result }}" != "success" || \
                "${{ needs.docker.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!" 