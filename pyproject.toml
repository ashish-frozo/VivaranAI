[tool.poetry]
name = "medbillguardagent"
version = "1.0.0"
description = "AI micro-service to detect over-charges in Indian hospital bills"
authors = ["VivaranAI Team <dev@vivaranai.com>"]
readme = "README.md"
packages = [{include = "medbillguardagent"}]

[tool.poetry.dependencies]
python = "^3.11"
# FastAPI Framework & ASGI
fastapi = "^0.104.1"
uvicorn = {extras = ["standard"], version = "^0.24.0"}
# Pydantic for data validation
pydantic = {extras = ["email"], version = "^2.5.0"}
# HTTP Client
httpx = "^0.25.2"
# Async Redis for caching
redis = {extras = ["hiredis"], version = "^5.0.1"}  
aiocache = {extras = ["redis"], version = "^0.12.2"}
# Document Processing & OCR
PyMuPDF = "^1.23.8"
pytesseract = "^0.3.10"
Pillow = "^10.1.0"
tabula-py = "^2.9.0"
# LLM Integration
openai = "^1.3.7"
tiktoken = "^0.5.2"
# OpenAI Agents SDK for multi-agent workflows
agents = {git = "https://github.com/openai/openai-agents-python.git", branch = "main"}
# Vector Search & RAG
lancedb = "^0.3.4"
sentence-transformers = "^2.2.2"
# Configuration & Environment
pyyaml = "^6.0.1"
python-dotenv = "^1.0.0"
# Logging & Monitoring
structlog = "^23.2.0"
prometheus-client = "^0.19.0"
# OpenTelemetry for tracing and observability
opentelemetry-api = "^1.21.0"
opentelemetry-sdk = "^1.21.0"
opentelemetry-exporter-jaeger-thrift = "^1.21.0"
opentelemetry-instrumentation-fastapi = "^0.42b0"
opentelemetry-instrumentation-requests = "^0.42b0"
opentelemetry-instrumentation-redis = "^0.42b0"
# Template Engine
jinja2 = "^3.1.2"
# Date/Time
pendulum = "^2.1.2"
# Security & Validation
cryptography = "^41.0.7"
# Rate Limiting
slowapi = "^0.1.9"
# NATS for Event Streaming
nats-py = "^2.6.0"
# Document Generation
python-docx = "^1.1.0"
reportlab = "^4.0.7"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.3"
pytest-asyncio = "^0.21.1"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
hypothesis = "^6.92.1"
# Load Testing
locust = "^2.17.0"
# Code Quality
ruff = "^0.1.6"
mypy = "^1.7.1"
black = "^23.11.0"
# Security Scanning
bandit = "^1.7.5"
safety = "^2.3.5"
# Pre-commit Hooks
pre-commit = "^3.5.0"
# Type Stubs
types-PyYAML = "^6.0.12.12"
types-redis = "^4.6.0.11"
types-Pillow = "^10.1.0.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "PGH", # pygrep-hooks (no silent exceptions)
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex (handled by complexity tools)
    "ARG002", # unused method argument (common in async methods)
]
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports in __init__.py
"test_*.py" = ["ARG", "SIM"]  # test files can be more verbose

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "camelot.*",
    "pytesseract.*",
    "lancedb.*", 
    "unleash.*",
    "nats.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--cov=medbillguardagent",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["medbillguardagent"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "test_*.py"]
skips = ["B101", "B601"]  # Skip assert statements and shell usage in tests 